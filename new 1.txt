import os
import csv

samples = []
with open('C:\\Users\\Shivam.Chawla01\\Downloads\\data\\data\\driving_log.csv') as csvfile:
    reader = csv.reader(csvfile)
    for line in reader:
        samples.append(line)

from sklearn.model_selection import train_test_split
train_samples, validation_samples = train_test_split(samples, test_size=0.2)

import cv2
import numpy as np
import sklearn

from keras.models import Sequential
from keras.layers import Flatten, Dense, Lambda
from keras.layers.convolutional import Convolution2D
from keras.layers.pooling import MaxPooling2D
from keras.layers import Cropping2D

def generator(samples, batch_size=128):
	num_samples = len(samples)
	while 1: 
		for offset in range(0, num_samples, batch_size):
			batch_samples = samples[offset:offset+batch_size]

			images = []
			angles = []
			for batch_sample in batch_samples:
				name = 'C:/Users/Shivam.Chawla01/downloads/data/data/IMG/'+batch_sample[0].split('/')[-1]
				center_image = cv2.imread(name)
				center_image=center_image[40:300,:,:]
				center_image=cv2.cvtColor(center_image,cv2.COLOR_BGR2RGB)
				center_image=cv2.resize(center_image,(64,64))
				center_angle = float(batch_sample[3])
				images.append(center_image)
				angles.append(center_angle)

         
			X_train = np.array(images)
			y_train = np.array(angles)
			yield (X_train, y_train)


train_generator = generator(train_samples, batch_size=32)
validation_generator = generator(validation_samples, batch_size=32)



model = Sequential()
model.add(Lambda(lambda x: x/128 - 1,
        input_shape=(64, 64, 3)))
model.add(Convolution2D(6,5,5,activation="relu"))
model.add(MaxPooling2D())
model.add(Convolution2D(6,5,5,activation="relu"))
model.add(MaxPooling2D())
model.add(Convolution2D(6,5,5,activation="relu"))
model.add(MaxPooling2D())
model.add(Flatten())
model.add(Dense(120))
model.add(Dense(84))
model.add(Dense(1))


model.compile(loss='mse', optimizer='adam')
model.fit_generator(train_generator, samples_per_epoch= len(train_samples), validation_data=validation_generator, nb_val_samples=len(validation_samples), epochs=3)